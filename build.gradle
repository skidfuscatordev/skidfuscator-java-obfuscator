import org.gradle.api.JavaVersion
import org.gradle.api.tasks.compile.JavaCompile

plugins {
    id 'java'
    id 'java-library'
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url 'https://repo.cleanroommc.com/releases/'
        }
        maven {
            url 'https://jitpack.io'
        }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    apply plugin: 'java-library'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.36'
        annotationProcessor 'org.projectlombok:lombok:1.18.36'
        implementation 'systems.manifold:manifold-ext-rt:2024.1.47'

        annotationProcessor group: 'systems.manifold', name: 'manifold-ext', version: '2024.1.47'
        testAnnotationProcessor group: 'systems.manifold', name: 'manifold-ext', version: '2024.1.47'
        annotationProcessor 'systems.manifold:manifold-preprocessor:2024.1.47'
        testAnnotationProcessor 'systems.manifold:manifold-preprocessor:2024.1.47'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    }

    compileJava {
        options.encoding = "UTF-8" // Will fail on the non-ascii comments if not set
    }

    tasks.withType(JavaCompile).configureEach {
        if (sourceCompatibility == JavaVersion.VERSION_17) {
            options.compilerArgs += [
                '--add-exports', 'java.base/jdk.internal.reflect=ALL-UNNAMED',
                '--add-exports', 'java.base/jdk.internal.util=ALL-UNNAMED',
                '--add-exports', 'java.base/sun.io.ch=ALL-UNNAMED'
        ]
        }
    }
    tasks.withType(Test).configureEach {
        if (sourceCompatibility == JavaVersion.VERSION_17) {
            jvmArgs += [
                '--add-exports', 'java.base/jdk.internal.reflect=ALL-UNNAMED',
                '--add-exports', 'java.base/jdk.internal.util=ALL-UNNAMED',
                '--add-exports', 'java.base/sun.io.ch=ALL-UNNAMED'
        ]
        }
    }

    if (JavaVersion.current() != JavaVersion.VERSION_1_8 &&
            sourceSets.main.allJava.files.any {it.name == "module-info.java"}) {
        tasks.withType(JavaCompile) {
            // if you DO define a module-info.java file:
            options.compilerArgs += ['-Xplugin:Manifold', '--module-path', it.classpath.asPath]
        }
    } else {
        tasks.withType(JavaCompile) {
            // If you DO NOT define a module-info.java file:
            options.compilerArgs += ['-Xplugin:Manifold']
        }
    }

    ext {
        asm = 'org.ow2.asm:asm:9.7.1'
        asm_commons = 'org.ow2.asm:asm-commons:9.7.1'
        asm_tree = 'org.ow2.asm:asm-tree:9.7.1'
        cafedude = 'com.github.Col-E:CAFED00D:2.1.1'
        slf4j_api = 'org.slf4j:slf4j-api:1.7.36'
        jlinker = 'com.github.xxDark:jlinker:1.0.7'
    }
}

group 'dev.skidfuscator.community'
version '2.0.0-SNAPSHOT'

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

test {
    useJUnitPlatform()
}